// Wikipedia Circular Buffer Example

#include <stdio.h>
#include <stdlib.h>
/** < Buffer Size */
#define BUFFER_SIZE 8
/**< Circular Buffer Types */
typedef unsigned char INT8U;
typedef INT8U KeyType ;
typedef struct {
INT8U writePointer ; /**< write pointer */
INT8U readPointer ; /**< read pointer */
INT8U size; /**< size of circular buffer */
INT8U mask; /**< bit Mask of circular buffer size*/
KeyType keys[0]; /**< Element of ciruclar buffer */
} CircularBuffer ;

/**< Init Circular Buffer */
CircularBuffer* CircularBufferInit(CircularBuffer** pQue, int size)
{
	int buf_size = size * sizeof(KeyType) + sizeof(CircularBuffer);
	*pQue = (CircularBuffer*)malloc(buf_size);
	if(*pQue)
	{
		printf("Init CircularBuffer: keys[%d] (%d)\n", size, buf_size);
		if(!(size & (size - 1)))
		{
			(*pQue)->size = size;
			(*pQue)->mask = size - 1;
			(*pQue)->writePointer = 0;
			(*pQue)->readPointer = 0;
		}
		else
		{
			printf("Error Size: %d is not power of TWO!\n", size);
		}
	}
	return *pQue;
}

inline int CircularBufferIsFull(CircularBuffer* que)
{
	return (((que->writePointer + 1) % que->size) == que->readPointer);
}

inline int CircularBufferIsEmpty(CircularBuffer* que)
{
	return (((que->readPointer + 1) % que->size) == que->writePointer);
}

inline int CircularBufferEnque(CircularBuffer* que, KeyType k)
{
	int isFull = CircularBufferIsFull(que);
	que->keys[que->writePointer] = k;
	que->writePointer++;
	que->writePointer %= que->size;
	return isFull;
}

inline int CircularBufferDeque(CircularBuffer* que, KeyType* pK)
{
	int isEmpty = CircularBufferIsEmpty(que);
	*pK = que->keys[que->readPointer];
	que->readPointer++;
	que->readPointer %= que->size;
	return(isEmpty);
}

inline int CircularBufferPrint(CircularBuffer* que)
{
	int i = 0;
	int isEmpty = CircularBufferIsEmpty(que);
	int isFull = CircularBufferIsFull(que);
	printf("\n==Q: w:%d r:%d f:%d e:%d\n", que->writePointer, que->readPointer, isFull, isEmpty);
	printf("[ ");
	for(i = 0; i < que->size; i++)
	{
		printf("%d ", que->keys[i]);
	}
	printf("]\n");
	return(isEmpty);
}

int main()
{
	CircularBuffer* que;
	KeyType a = 0;
	int isEmpty;
	CircularBufferInit(&que, BUFFER_SIZE);
	CircularBufferPrint(que);
	while(!CircularBufferEnque(que, a++));
	CircularBufferPrint(que);
	while(!isEmpty)
	{
		isEmpty = CircularBufferDeque(que, &a);
	}
	CircularBufferPrint(que);
	free(que);
	return 0;
}
//#endif